--[[

	RoUI2 Animation Module by AstrealDev
	
	This module is used to manipulate RoUI2 animations.
	While this module is entirely open source, the RoUI2
	plugin is not. Animations are generated by the plugin
	and handled by this module.
	
	This modules lastest version can be downloaded
	via the RoUI2 Plugin.
	
	GitHub: https://github.com/astrealRBLX/RoUI2
]]

local RoUI2 = {};
local AnimationControllerClass = {};
local AnimationClass = {};

-----// AnimationController Class //-----
function RoUI2.CreateAnimationController()
	local self = setmetatable({}, {
		__index = AnimationControllerClass;
	});

	self.Animations = {};

	return self;
end

function AnimationControllerClass:LoadAnimation(animationName, toAnimateObj, animationObject)
	local this = setmetatable({}, {
		__index = AnimationClass;
	});
	
	this.AnimatedInstance = toAnimateObj;
	this.Instance = animationObject;
	this.Tweens = {};
	this.PlayingTweens = {};
	
	-- Sort keyframe folders
	local keyframeFolders = {};
	for _, keyframeFolder in pairs(animationObject:GetChildren()) do
		keyframeFolders[tonumber(keyframeFolder.Name:sub(11))] = keyframeFolder;
	end
	
	-- Generate tweens
	for index, keyframeFolder in pairs(keyframeFolders) do
		if index == #keyframeFolders then break end
		
		for _, keyframeInstance in pairs(keyframeFolder:GetChildren()) do
			if not this.Tweens[keyframeInstance:GetAttribute("Property")] then
				this.Tweens[keyframeInstance:GetAttribute("Property")] = {};
			end
			
			local nextKeyframeFolder = animationObject:FindFirstChild("keyframes_" .. index + 1);
			
			if not nextKeyframeFolder then continue end
			
			local nextKeyframeInstance = nextKeyframeFolder:FindFirstChild(keyframeInstance.Name);
			
			if not nextKeyframeInstance then continue end
			
			local tweenInfo = TweenInfo.new(nextKeyframeInstance:GetAttribute("Time") - keyframeInstance:GetAttribute("Time"),
				Enum.EasingStyle[nextKeyframeInstance:GetAttribute("EasingStyle")],
				Enum.EasingDirection[nextKeyframeInstance:GetAttribute("EasingDirection")]);
			local goal = {};
			goal[keyframeInstance:GetAttribute("Property")] = nextKeyframeInstance:GetAttribute("Value");
			
			table.insert(this.Tweens[keyframeInstance:GetAttribute("Property")], game:GetService("TweenService"):Create(toAnimateObj, tweenInfo, goal));
		end
		
	end
	
	self.Animations[animationName] = this;
	
	return this;
end

function AnimationControllerClass:RunAnimation(animName)
	self.Animations[animName]:Play();
end

-----// Animation Class //-----
function AnimationClass:Play()
	for property, tweens in pairs(self.Tweens) do
		coroutine.wrap(function()
			for _, tween in pairs(tweens) do
				table.insert(self.PlayingTweens, tween);
				tween:Play();
				tween.Completed:Wait();
				table.remove(self.PlayingTweens, table.find(self.PlayingTweens, tween));
			end
		end)();
	end
end

function AnimationClass:Wait()
	assert(#self.PlayingTweens > 0, "No animation is currently playing.");
	repeat
		game:GetService("RunService").RenderStepped:Wait();
	until #self.PlayingTweens <= 0
end

return RoUI2;
